
üå± Raspberry Pi Grow Room Automation System

Overview

This project is a smart grow environment for a single cannabis 
plant using a tide-based hydroponic system. 
It uses a Raspberry Pi 3 to manage sensors and actuators, 
and exposes a REST API for frontend access from any device. 
The initial frontend will be a webpage that interacts with this API.

Goals
	‚Ä¢	Fully monitor and control the environment via a web interface.
	‚Ä¢	Log all environmental and system data locally.
	‚Ä¢	Build a modular backend to support future database and cloud integration.

Hardware Components
	‚Ä¢	Raspberry Pi 3
	‚Ä¢	12‚Äù touchscreen (can display local version of the web frontend if needed)
	‚Ä¢	Sanlight 270W LED (controlled by relay and 0‚Äì10V DAC)
    ‚Ä¢   rohrventilator mit 5v pwm steuerung f√ºr abluft
	‚Ä¢	Gravity 2-channel DAC (DFR0971, analog control of light via i2c)
	‚Ä¢	Relay module (light on/off)
	‚Ä¢	2x BME280 sensors (temperature, humidity, pressure)
	‚Ä¢	MH-Z19 sensor (CO‚ÇÇ monitoring)
	‚Ä¢	IO ADC Nuvoton MS51 microcontroller with inbuilt 12-bit ADC (pump/relay interface via i2c)
  	‚Ä¢   Grove - 8 Channel I2C Multiplexer/I2C Hub (TCA9548A)
	‚Ä¢	Tide-based hydro system

Software Architecture

Backend (on Raspberry Pi)
	‚Ä¢	Language: Python
	‚Ä¢	Responsibilities:
	‚Ä¢	Sensor polling & hardware control
	‚Ä¢	Tide system logic and scheduling
	‚Ä¢	Logging data to /data/log.csv
	‚Ä¢	Exposing a RESTful API using Flask or FastAPI
	‚Ä¢	API Endpoints:
	‚Ä¢	GET /status ‚Äì return current readings and system state
	‚Ä¢	POST /light ‚Äì control light power and intensity
	‚Ä¢	POST /pump ‚Äì trigger or schedule tide pump
	‚Ä¢	GET /log ‚Äì retrieve historical data
	‚Ä¢	More endpoints to come for calibration, settings, etc.

Frontend (web-based)
	‚Ä¢	Accessible from any device on the same network (or remotely in the future)
	‚Ä¢	Features:
	‚Ä¢	Real-time sensor dashboard (temp, humidity, CO‚ÇÇ, pressure)
	‚Ä¢	Light control UI (on/off, intensity slider)
	‚Ä¢	Simple valve and pump controll
	‚Ä¢	Graphs of recent environmental data
	‚Ä¢	Alert/status messages
	‚Ä¢	Initial implementation: Basic HTML/JS frontend hosted on the Pi or another device, calling the API.

Future Plans
	‚Ä¢	WebSocket support for live updates
	‚Ä¢	User authentication and remote access
	‚Ä¢	Cloud database logging for analytics
	‚Ä¢	Progressive Web App (PWA) capabilities

